

type Query {
    getUsers: getUsersResponse!,
    getCourses(search: course! ): getCoursesResponse!
}

type Mutation {
    signup(form: signUpForm!): authResponse!
    login(credentials: auth! ): authResponse!
    addFriend(friendId: ID!): response! 
    like(courseId: ID!): response!
}


input auth{
    username: String!
    password: String!
}

input signUpForm{
    email: String!
    username: String!
    password: String!
}

input course{
    search: String!
}

type User{
    id: ID!
    username: String!
    email: String!
    friends: [Friend!]
    likedCourses: [Course!]
    createdAt: String
    updatedAt: String!
}


type Friend{
    id: ID!,
    friend: User!
}

type Course{
    id: ID!,
    name: String!
    description: String!  
    duration: String!
    difficulty: String!
    countEnrolled: String!
    courseGivenBy: String!
    language: String!
    isPaid: Boolean!
    url: String!
    imageUrl: String!
    source: String!,
    likes: [User!]!,
    createdAt: String!
    updatedAt: String!
}

type response{
    status: String!,
    error: String
}


type authResponse{
    status: String!
    token: String
    error: String
    data: User
}

type getUsersResponse {
    status: String!,
    error: String,
    users: [User!]
}

type getCoursesResponse{
    status: String!,
    error: String,
    courses: [Course!]
}


